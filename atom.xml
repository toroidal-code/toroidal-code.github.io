<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kate]]></title>
  <link href="http://katherine.io/atom.xml" rel="self"/>
  <link href="http://katherine.io/"/>
  <updated>2014-01-31T10:33:10-05:00</updated>
  <id>http://katherine.io/</id>
  <author>
    <name><![CDATA[Katherine Whitlock]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional Programming]]></title>
    <link href="http://katherine.io/blog/2013/12/16/functional-programming/"/>
    <updated>2013-12-16T17:55:37-05:00</updated>
    <id>http://katherine.io/blog/2013/12/16/functional-programming</id>
    <content type="html"><![CDATA[<p>A lot of programmers start with C, or C++, or Java. They&rsquo;re currently the big three in the industry, with good reason: they&rsquo;re time-tried, and cross-platform.</p>

<p>Other areas have their own (preferred) languages:</p>

<ul>
<li>Web:

<ul>
<li>Ruby (Rails, Sinatra, Padrino)</li>
<li>Python (Django, Flask)</li>
<li>Java/Scala (Play)</li>
<li>Javascript (Node.js)</li>
</ul>
</li>
<li>Academia (PLT):

<ul>
<li>Haskell</li>
<li>Standard ML</li>
<li>OCaml</li>
<li>Scheme</li>
</ul>
</li>
<li>Systems Programming:

<ul>
<li>C/C++ (especially embedded)</li>
<li>Go</li>
<li>Rust</li>
<li>D</li>
</ul>
</li>
</ul>


<p>Of course, these languages can also be used for general-use programming. I regularly use Ruby for quick prototyping, and then move to another language more suited to what I actually need.</p>

<p>Functional programming is based on Alonzo Church&rsquo;s <a href="http://en.wikipedia.org/wiki/Lambda_calculus">Î»-calculus</a>.</p>

<p>One of the first real implementations of this was LISP in the late 1950&rsquo;s. Lisp attempted to offer a simple mathematical style of programming to the then only imperitive field.</p>

<p>Later, other so-called &ldquo;functional&rdquo; languages emerged: Standard ML, Clean, Scheme, Common Lisp, Caml, OCaml, Haskell, Pure, etc. Only two of these are object-oriented: Common Lisp and OCaml, and neither are languages that traditional O-O programmers feel comfortable just look at. Common Lisp is obviously a Lisp, and OCaml is obviously an ML. Both are very powerful, but the syntax takes some getting used to.</p>

<p>In the age of languages like Ruby and Python, this shouldn&rsquo;t be the case anymore. Ruby gives people a very close taste of what functional O-O might feel like. Scala does too. It just hasn&rsquo;t been done well (Have you ever tried to curry a method in Scala?). And if you&rsquo;re wondering why I&rsquo;m not counting Javacript in here, it&rsquo;s because Javascript doesn&rsquo;t have a &lsquo;classic&rsquo; object system, and instead uses prototypal inheritance (it&rsquo;s also not technically functional, but that&rsquo;s another rant).</p>

<p>This is something I&rsquo;d like to have. Objects in functional language, that looks something like Ruby or Python. So I came up with Brick.</p>

<p>Brick is functional.<br/>
Brick is object-oriented.<br/>
Brick looks (something) like Ruby, Python, and Scala.</p>

<p>Here&rsquo;s a taste:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Color(r : Fixnum, g : Fixnum, b : Fixnum) impl ToStr
</span><span class='line'>  members
</span><span class='line'>      r = r 
</span><span class='line'>      g = g
</span><span class='line'>      b = b
</span><span class='line'>
</span><span class='line'>    impl ToStr
</span><span class='line'>        method to_str
</span><span class='line'>            "rgb({:d}, {:d}, {:d})".format!(this.r, this.g, this.b)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>fn main
</span><span class='line'>  let | c = Color(12, 18, 39)
</span><span class='line'>      puts(c.to_str()) </span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s look at this. We have classes, declared with the <code>class</code> keyword. Following that is the class&#8217; name, the default constructor, and the list of traits that we implement, here just <code>ToStr</code>.</p>

<p>After that is the members list, which lists all the slots our class has.</p>

<p>After the members list comes method declarations. Methods specifically all have the type of <code>ThisClass -&gt; something....</code>. This means that there is an implicit first parameter that has the type of the current class. The name of this parameter is <code>this</code>.</p>

<p>The previous example can be simplified to</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Color(r:Fixnum, g:Fixnum, b:Fixnum) impl ToStr
</span><span class='line'>    impl ToStr
</span><span class='line'>        method to_str
</span><span class='line'>            "rgb({:s}, {:s}, {:s})".format!(this.r, this.g, this.b)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>fn main
</span><span class='line'>  let | c = Color(12, 18, 39)
</span><span class='line'>      puts(c.to_str()) </span></code></pre></td></tr></table></div></figure>


<p>So what do you think? Do you like this syntax? I like it. (It&rsquo;s pretty clean)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Brick a Day]]></title>
    <link href="http://katherine.io/blog/2013/10/15/a-brick-a-day/"/>
    <updated>2013-10-15T00:56:00-04:00</updated>
    <id>http://katherine.io/blog/2013/10/15/a-brick-a-day</id>
    <content type="html"><![CDATA[<p>I know a lot of programming languages, but I&rsquo;m still not really happy with any of them. It started with PBASIC, then Objective-C, C, Common Lisp, Python, C++, Java, Ruby, Scheme, Assembly (Propeller), and now OCaml and Rust, in that order. Of all these languages, my favorites are probably Ruby, Common Lisp, and Rust.</p>

<p>As you can probably tell from that, I like functional programming. The idea that any call is merely a transformation of the initial data is really cool. But there&rsquo;s a couple of bad problems I have with those three languages:</p>

<ul>
<li>Speed</li>
<li>Portability, specifically to new architectures</li>
<li>Adoption</li>
</ul>


<p>Each of these problems applies to at least two of the languages.</p>

<p><a href="http://www.ruby-lang.org">Ruby</a> is flexible and powerful, but is slow as molasses. The <a href="http://rubini.us">Rubinius</a> project is definitely helping with this, being a JIT for Ruby, but <del>they still have a ways to go, as they&rsquo;re currently working on 1.9.3 support</del>. And, the overhead of a VM still exists. Out of the three languages, this definitely has the best community support (probably because of Rails, but beggers can&rsquo;t be choosers). EDIT: Apparently, rubinius reached 2.0.0 without me noticing, and now supports Ruby 2.1 syntax. Way to go, RBX!</p>

<p><a href="http://common-lisp.net">Common Lisp</a> is <em>the</em> langauge for firsts. GC, cons pairs, compile-time AST editing (macros), type inference. If you can think of it, CL probably has it. And it has the speed Ruby doesn&rsquo;t, with 30+ years of academic research poured into projects like <a href="http://www.sbcl.org">SBCL</a>. But it still falls short. The CL library scene is sad, and only recently has a decent dependency management system come to fruition. Yes, I&rsquo;m looking at you, <a href="http://www.quicklisp.org">quicklisp</a>. However, cross-compiling clisp is no easy feat, and running that on a microcontroller is not going to happen.</p>

<p><a href="http://www.rust-lang.org">Rust</a> is the newcomer to the scene, the proverbial hipster. There&rsquo;s a great deal of hype surrounding Rust, at least at my school, and it looks absolutely amazing. But it&rsquo;s a bit too C-like and low-level for my taste. Plus, there&rsquo;s next to no documentation for the language, the best thing being the symbiotic project the language is being developed with, <a href="https://github.com/mozilla/servo">Servo</a>. Out of all these languages, Rust is probably the closest to what I would like to work with on a daily basis.</p>

<p>Since no language has the features I want, or the facilities to modify it to the degree I want, I&rsquo;ve decided to write my own language, called Brick.</p>

<p>This is not a small project.</p>

<p>Language design is a big deal, and I&rsquo;ve spent the last two and a half months writing syntax ideas, reconciling possible conflicts, working out how systems might interact. And slowly, I came to a point where I started to know what this would be like. Next post, I&rsquo;ll talk about some of the design decisions, and the syntax.</p>
]]></content>
  </entry>
  
</feed>
